#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Ollama –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–π LLM —Å MCP-–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
"""

import asyncio
import json
import subprocess
import sys
from typing import Any, Dict, List, Optional
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    import requests
    from mcp.client.models import InitializeRequest
    from mcp.client.session import ClientSession
    from mcp.client.stdio import stdio_client
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.run([sys.executable, "-m", "pip", "install", "mcp", "requests"])
    import requests
    from mcp.client.models import InitializeRequest
    from mcp.client.session import ClientSession
    from mcp.client.stdio import stdio_client

class OllamaMCPClient:
    def __init__(self, ollama_host: str = "http://localhost:11434", model_name: str = "llama3.2"):
        self.ollama_host = ollama_host
        self.model_name = model_name
        self.mcp_session: Optional[ClientSession] = None
        self.available_tools: List[Dict] = []
        
    async def start_mcp_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç MCP-—Å–µ—Ä–≤–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º MCP-—Å–µ—Ä–≤–µ—Ä –∫–∞–∫ subprocess
            server_process = subprocess.Popen(
                [sys.executable, "/workspace/mcp_server.py"],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ stdio
            read_stream, write_stream = stdio_client()
            
            self.mcp_session = ClientSession(read_stream, write_stream)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.mcp_session.initialize(
                InitializeRequest(
                    protocolVersion="2024-11-05",
                    capabilities={},
                    clientInfo={
                        "name": "ollama-mcp-client", 
                        "version": "1.0.0"
                    }
                )
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tools_response = await self.mcp_session.list_tools()
            self.available_tools = tools_response.tools
            
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.available_tools)}")
            return server_process
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MCP-—Å–µ—Ä–≤–µ—Ä—É: {e}")
            return None
    
    def call_ollama(self, prompt: str, tools: List[Dict] = None) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç Ollama —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        try:
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "stream": False
            }
            
            if tools:
                payload["tools"] = tools
            
            response = requests.post(
                f"{self.ollama_host}/api/generate",
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                return response.json().get("response", "")
            else:
                return f"–û—à–∏–±–∫–∞ Ollama: {response.status_code}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama: {e}"
    
    async def execute_tool(self, tool_name: str, arguments: Dict[str, Any]) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP"""
        try:
            if not self.mcp_session:
                return "MCP-—Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            
            result = await self.mcp_session.call_tool(tool_name, arguments)
            
            if result.content:
                return result.content[0].text if result.content[0].type == "text" else str(result.content[0])
            else:
                return "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}"
    
    def format_tools_for_ollama(self) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Ollama"""
        formatted_tools = []
        
        for tool in self.available_tools:
            formatted_tool = {
                "type": "function",
                "function": {
                    "name": tool.name,
                    "description": tool.description,
                    "parameters": tool.inputSchema
                }
            }
            formatted_tools.append(formatted_tool)
        
        return formatted_tools
    
    async def chat_with_tools(self, user_message: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_description = "\n".join([
            f"- {tool.name}: {tool.description}" 
            for tool in self.available_tools
        ])
        
        system_prompt = f"""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:

{tools_description}

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, 
–æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
TOOL_CALL: {{
    "name": "–∏–º—è_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
    "arguments": {{"–ø–∞—Ä–∞–º–µ—Ç—Ä": "–∑–Ω–∞—á–µ–Ω–∏–µ"}}
}}

–ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã, –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω–æ.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}
"""

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama
        ollama_response = self.call_ollama(system_prompt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if "TOOL_CALL:" in ollama_response:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                tool_call_start = ollama_response.find("TOOL_CALL:") + len("TOOL_CALL:")
                tool_call_json = ollama_response[tool_call_start:].strip()
                
                # –ù–∞—Ö–æ–¥–∏–º JSON-–±–ª–æ–∫
                if tool_call_json.startswith('{'):
                    # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                    bracket_count = 0
                    end_pos = 0
                    for i, char in enumerate(tool_call_json):
                        if char == '{':
                            bracket_count += 1
                        elif char == '}':
                            bracket_count -= 1
                            if bracket_count == 0:
                                end_pos = i + 1
                                break
                    
                    tool_call_json = tool_call_json[:end_pos]
                
                tool_call = json.loads(tool_call_json)
                tool_name = tool_call["name"]
                tool_args = tool_call["arguments"]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                tool_result = await self.execute_tool(tool_name, tool_args)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                final_prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: {user_message}

–Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {tool_args}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_result}

–î–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""

                final_response = self.call_ollama(final_prompt)
                return final_response
                
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}\n\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {ollama_response}"
        
        return ollama_response

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Ollama MCP Client...")
    
    client = OllamaMCPClient()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP-—Å–µ—Ä–≤–µ—Ä
    server_process = await client.start_mcp_server()
    if not server_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MCP-—Å–µ—Ä–≤–µ—Ä")
        return
    
    print("‚úÖ MCP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[tool.name for tool in client.available_tools]}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    print("\nüí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–≤–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    print("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
    print("- '–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'")
    print("- '—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt —Å —Ç–µ–∫—Å—Ç–æ–º Hello World'")
    print("- '–ø—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª test.txt'")
    print("- '–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ test.txt'")
    
    try:
        while True:
            user_input = input("\nüë§ –í—ã: ").strip()
            
            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                break
            
            if not user_input:
                continue
            
            print("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            response = await client.chat_with_tools(user_input)
            print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
            
    except KeyboardInterrupt:
        print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º MCP-—Å–µ—Å—Å–∏—é
        if client.mcp_session:
            await client.mcp_session.close()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
        if server_process:
            server_process.terminate()
            server_process.wait()

if __name__ == "__main__":
    asyncio.run(main())