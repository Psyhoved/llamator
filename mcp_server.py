#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π MCP-—Å–µ—Ä–≤–µ—Ä —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ MCP-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
"""

import json
import os
import sys
import asyncio
from typing import Any, Dict, List, Optional
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
try:
    from mcp.server.models import InitializeRequest, ServerCapabilities
    from mcp.server.server import NotificationOptions, Server
    from mcp.server.stdio import stdio_server
    from mcp.types import (
        Resource,
        Tool,
        TextContent,
        ImageContent,
        EmbeddedResource,
    )
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ MCP...")
    os.system("pip install mcp")
    from mcp.server.models import InitializeRequest, ServerCapabilities
    from mcp.server.server import NotificationOptions, Server
    from mcp.server.stdio import stdio_server
    from mcp.types import (
        Resource,
        Tool,
        TextContent,
        ImageContent,
        EmbeddedResource,
    )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
server = Server("file-operations-server")

@server.list_tools()
async def handle_list_tools() -> List[Tool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return [
        Tool(
            name="read_file",
            description="–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
            inputSchema={
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string", 
                        "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    }
                },
                "required": ["path"]
            }
        ),
        Tool(
            name="write_file",
            description="–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª",
            inputSchema={
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    },
                    "content": {
                        "type": "string",
                        "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"
                    }
                },
                "required": ["path", "content"]
            }
        ),
        Tool(
            name="list_directory",
            description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
            inputSchema={
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
                    }
                },
                "required": ["path"]
            }
        ),
        Tool(
            name="get_file_info",
            description="–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (—Ä–∞–∑–º–µ—Ä, –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è)",
            inputSchema={
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"
                    }
                },
                "required": ["path"]
            }
        )
    ]

@server.call_tool()
async def handle_call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    if name == "read_file":
        try:
            path = arguments["path"]
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            return [TextContent(type="text", text=f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {path}:\n\n{content}")]
        except Exception as e:
            return [TextContent(type="text", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")]
    
    elif name == "write_file":
        try:
            path = arguments["path"]
            content = arguments["content"]
            with open(path, 'w', encoding='utf-8') as f:
                f.write(content)
            return [TextContent(type="text", text=f"–§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω")]
        except Exception as e:
            return [TextContent(type="text", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {str(e)}")]
    
    elif name == "list_directory":
        try:
            path = arguments["path"]
            items = []
            for item in os.listdir(path):
                item_path = os.path.join(path, item)
                if os.path.isdir(item_path):
                    items.append(f"üìÅ {item}/")
                else:
                    size = os.path.getsize(item_path)
                    items.append(f"üìÑ {item} ({size} bytes)")
            
            result = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}:\n" + "\n".join(items)
            return [TextContent(type="text", text=result)]
        except Exception as e:
            return [TextContent(type="text", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")]
    
    elif name == "get_file_info":
        try:
            path = arguments["path"]
            stat = os.stat(path)
            import datetime
            
            info = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {path}:
‚Ä¢ –†–∞–∑–º–µ—Ä: {stat.st_size} bytes
‚Ä¢ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {datetime.datetime.fromtimestamp(stat.st_mtime)}
‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {oct(stat.st_mode)[-3:]}
‚Ä¢ –¢–∏–ø: {'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' if os.path.isdir(path) else '–§–∞–π–ª'}"""
            
            return [TextContent(type="text", text=info)]
        except Exception as e:
            return [TextContent(type="text", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {str(e)}")]
    
    else:
        return [TextContent(type="text", text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}")]

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdio
    async with stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializeRequest(
                protocolVersion="2024-11-05",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
                clientInfo={
                    "name": "ollama-mcp-client",
                    "version": "1.0.0",
                },
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())